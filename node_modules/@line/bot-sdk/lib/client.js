"use strict";
var http_1 = require("./http");
var URL = require("./urls");
var exceptions_1 = require("./exceptions");
function toArray(maybeArr) {
    return Array.isArray(maybeArr) ? maybeArr : [maybeArr];
}
function checkJSON(raw) {
    if (typeof raw === "object") {
        return raw;
    }
    else {
        throw new exceptions_1.JSONParseError("Failed to parse response body as JSON", raw);
    }
}
var Client = (function () {
    function Client(config) {
        if (!config.channelAccessToken) {
            throw new Error("no channel access token");
        }
        this.config = config;
    }
    Client.prototype.pushMessage = function (to, messages) {
        return this.post(URL.push, {
            messages: toArray(messages),
            to: to
        });
    };
    Client.prototype.replyMessage = function (replyToken, messages) {
        return this.post(URL.reply, {
            messages: toArray(messages),
            replyToken: replyToken
        });
    };
    Client.prototype.multicast = function (to, messages) {
        return this.post(URL.multicast, {
            messages: toArray(messages),
            to: to
        });
    };
    Client.prototype.getProfile = function (userId) {
        return this.get(URL.profile(userId)).then(checkJSON);
    };
    Client.prototype.getGroupMemberProfile = function (groupId, userId) {
        return this.get(URL.groupMemberProfile(groupId, userId)).then(checkJSON);
    };
    Client.prototype.getRoomMemberProfile = function (roomId, userId) {
        return this.get(URL.roomMemberProfile(roomId, userId)).then(checkJSON);
    };
    Client.prototype.getGroupMemberIds = function (groupId) {
        var _this = this;
        var load = function (start) {
            return _this.get(URL.groupMemberIds(groupId, start))
                .then(checkJSON)
                .then(function (res) {
                if (!res.next) {
                    return res.memberIds;
                }
                return load(res.next).then(function (extraIds) {
                    return res.memberIds.concat(extraIds);
                });
            });
        };
        return load();
    };
    Client.prototype.getRoomMemberIds = function (roomId) {
        var _this = this;
        var load = function (start) {
            return _this.get(URL.roomMemberIds(roomId, start))
                .then(checkJSON)
                .then(function (res) {
                if (!res.next) {
                    return res.memberIds;
                }
                return load(res.next).then(function (extraIds) {
                    return res.memberIds.concat(extraIds);
                });
            });
        };
        return load();
    };
    Client.prototype.getMessageContent = function (messageId) {
        return this.stream(URL.content(messageId));
    };
    Client.prototype.leaveGroup = function (groupId) {
        return this.post(URL.leaveGroup(groupId));
    };
    Client.prototype.leaveRoom = function (roomId) {
        return this.post(URL.leaveRoom(roomId));
    };
    Client.prototype.getRichMenu = function (richMenuId) {
        return this.get(URL.richMenu(richMenuId)).then(checkJSON);
    };
    Client.prototype.createRichMenu = function (richMenu) {
        return this.post(URL.richMenu(), richMenu)
            .then(checkJSON)
            .then(function (res) { return res.richMenuId; });
    };
    Client.prototype.deleteRichMenu = function (richMenuId) {
        return this.delete(URL.richMenu(richMenuId));
    };
    Client.prototype.getRichMenuIdOfUser = function (userId) {
        return this.get(URL.userRichMenu(userId))
            .then(checkJSON)
            .then(function (res) { return res.richMenuId; });
    };
    Client.prototype.linkRichMenuToUser = function (userId, richMenuId) {
        return this.post(URL.userRichMenu(userId, richMenuId));
    };
    Client.prototype.unlinkRichMenuFromUser = function (userId) {
        return this.delete(URL.userRichMenu(userId));
    };
    Client.prototype.getRichMenuImage = function (richMenuId) {
        return this.stream(URL.richMenuContent(richMenuId));
    };
    Client.prototype.setRichMenuImage = function (richMenuId, data, contentType) {
        return this.postBinary(URL.richMenuContent(richMenuId), data, contentType);
    };
    Client.prototype.getRichMenuList = function () {
        return this.get(URL.richMenuList())
            .then(checkJSON)
            .then(function (res) { return res.richmenus; });
    };
    Client.prototype.authHeader = function () {
        return { Authorization: "Bearer " + this.config.channelAccessToken };
    };
    Client.prototype.delete = function (url) {
        return http_1.del(url, this.authHeader());
    };
    Client.prototype.get = function (url) {
        return http_1.get(url, this.authHeader());
    };
    Client.prototype.post = function (url, body) {
        return http_1.post(url, this.authHeader(), body);
    };
    Client.prototype.postBinary = function (url, data, contentType) {
        return http_1.postBinary(url, this.authHeader(), data, contentType);
    };
    Client.prototype.stream = function (url) {
        return http_1.stream(url, this.authHeader());
    };
    return Client;
}());
exports.__esModule = true;
exports["default"] = Client;
//# sourceMappingURL=client.js.map