{
  "_args": [
    [
      {
        "raw": "world-clock@^1.3.1",
        "scope": null,
        "escapedName": "world-clock",
        "name": "world-clock",
        "rawSpec": "^1.3.1",
        "spec": ">=1.3.1 <2.0.0",
        "type": "range"
      },
      "/media/psf/Home/fun/hobot86"
    ]
  ],
  "_from": "world-clock@>=1.3.1 <2.0.0",
  "_id": "world-clock@1.3.1",
  "_inCache": true,
  "_location": "/world-clock",
  "_nodeVersion": "6.8.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/world-clock-1.3.1.tgz_1485203926603_0.5813205323647708"
  },
  "_npmUser": {
    "name": "guidesmiths",
    "email": "stephen.cresswell@guidesmiths.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "world-clock@^1.3.1",
    "scope": null,
    "escapedName": "world-clock",
    "name": "world-clock",
    "rawSpec": "^1.3.1",
    "spec": ">=1.3.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/world-clock/-/world-clock-1.3.1.tgz",
  "_shasum": "5b9332cd24cb55775fe50e83da9438ce43bf6f67",
  "_shrinkwrap": null,
  "_spec": "world-clock@^1.3.1",
  "_where": "/media/psf/Home/fun/hobot86",
  "author": {
    "name": "GuideSmiths Ltd"
  },
  "bugs": {
    "url": "https://github.com/guidesmiths/world-clock/issues"
  },
  "dependencies": {
    "js-joda": "^1.1.12",
    "zoneinfo": "^0.1.8"
  },
  "description": "A world clock underwritten by js-joda and zoneinfo",
  "devDependencies": {
    "chai": "^3.5.0",
    "codeclimate-test-reporter": "^0.4.0",
    "eslint": "^3.12.2",
    "eslint-config-imperative": "^1.0.0",
    "eslint-plugin-imperative": "^1.0.0",
    "groundhog-day": "^1.0.1",
    "husky": "^0.13.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.2.0"
  },
  "directories": {
    "test": "tests"
  },
  "dist": {
    "shasum": "5b9332cd24cb55775fe50e83da9438ce43bf6f67",
    "tarball": "https://registry.npmjs.org/world-clock/-/world-clock-1.3.1.tgz"
  },
  "gitHead": "c04b2c37da489681806c9a1bbad0fbaef149da36",
  "homepage": "https://guidesmiths.github.io/world-clock/",
  "keywords": [
    "Date",
    "Time",
    "Clock",
    "World",
    "Timezone",
    "Zone",
    "Joda",
    "Daylight",
    "Saving",
    "local"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "guidesmiths",
      "email": "stephen.cresswell@guidesmiths.com"
    }
  ],
  "name": "world-clock",
  "optionalDependencies": {},
  "readme": "# world-clock\nA library for getting dates/times in explicit timezones.\n\n[![NPM version](https://img.shields.io/npm/v/world-clock.svg?style=flat-square)](https://www.npmjs.com/package/world-clock)\n[![NPM downloads](https://img.shields.io/npm/dm/world-clock.svg?style=flat-square)](https://www.npmjs.com/package/world-clock)\n[![Build Status](https://img.shields.io/travis/guidesmiths/world-clock/master.svg)](https://travis-ci.org/guidesmiths/world-clock)\n[![Code Climate](https://codeclimate.com/github/guidesmiths/world-clock/badges/gpa.svg)](https://codeclimate.com/github/guidesmiths/world-clock)\n[![Test Coverage](https://codeclimate.com/github/guidesmiths/world-clock/badges/coverage.svg)](https://codeclimate.com/github/guidesmiths/world-clock/coverage)\n[![Code Style](https://img.shields.io/badge/code%20style-imperative-brightgreen.svg)](https://github.com/guidesmiths/eslint-config-imperative)\n[![Dependency Status](https://david-dm.org/guidesmiths/world-clock.svg)](https://david-dm.org/guidesmiths/world-clock)\n[![devDependencies Status](https://david-dm.org/guidesmiths/world-clock/dev-status.svg)](https://david-dm.org/guidesmiths/world-clock?type=dev)\n\n## API\n\n### isValid(&lt;timezone&gt;, [&lt;millis|date|string&gt;])\nReturns whether the timezone and optional instant is valid, e.g.\n```js\nconst clock = require('world-clock')()\n\nclock.isValid('Europe/London', Date.now()) // true\n```\n\n### today(&lt;timezone&gt;)\nReturns an instance of [js-joda.LocalDate](https://js-joda.github.io/js-joda/esdoc/class/src/LocalDate.js~LocalDate.html). Throws an error if passed an invalid timezone or instant.\n\n```js\nconst clock = require('world-clock')()\n\nclock.today('Europe/London').toString() // 2016-08-27\n```\n\n### localDate(&lt;timezone&gt;, [&lt;millis|date|string&gt;])\nReturns an instance of [js-joda.LocalDate](https://js-joda.github.io/js-joda/esdoc/class/src/LocalDate.js~LocalDate.html). Throws an error if passed an invalid timezone or instant.\n\n```js\nconst clock = require('world-clock')()\n\nclock.localDate('Europe/London').toString()             // 2016-08-27\nclock.localDate('Europe/London', Date.now()).toString() // 2016-08-27\n```\n\n### localTime(&lt;timezone&gt;, [&lt;millis|date|string&gt;])\nReturns an instance of [js-joda.LocalTime](https://js-joda.github.io/js-joda/esdoc/class/src/LocalTime.js~LocalTime.html). Throws an error if passed an invalid timezone or instant.\n\n```js\nconst clock = require('world-clock')()\n\nclock.localTime('Europe/London').toString()             // 15:03:24\nclock.localTime('Europe/London', Date.now()).toString() // 15:03:24\n```\n\n### localDateTime(&lt;timezone&gt;, [&lt;millis|date|string&gt;])\nReturns an instance of [js-joda.LocalDateTime](https://js-joda.github.io/js-joda/esdoc/class/src/LocalDateTime.js~LocalDateTime.html). Throws an error if passed an invalid timezone or instant.\n\n```js\nconst clock = require('world-clock')()\n\nclock.localDateTime('Europe/London').toString()             // 2016-08-27T15:03.24\nclock.localDateTime('Europe/London', Date.now()).toString() // 2016-08-27T15:03.24\n```\n\n### zonedDateTime(&lt;timezone&gt;, [&lt;millis|date|string&gt;])\nReturns an instance of [js-joda.ZonedDateTime](https://js-joda.github.io/js-joda/esdoc/class/src/ZonedDateTime.js~ZonedDateTime.html). Throws an error if passed an invalid timezone or instant.\n\n```js\nconst clock = require('world-clock')()\n\nclock.zonedDateTime('Europe/London').toString()             // 2016-08-27T15:03.24+01:00\nclock.zonedDateTime('Europe/London', Date.now()).toString() // 2016-08-27T15:03.24+01:00\n```\n\n## Advanced Usage\n\n### Using the system time zone\nThis is not recommented since a lot of date related bugs are caused because of accidental reliance on the system time zone, but if you really need to...\n```js\nconst clock = require('world-clock')()\n\nclock.today('SYSTEM').toString()          // 2016-08-27\nclock.localDate('SYSTEM').toString()      // 2016-08-27 - same as today\nclock.localTime('SYSTEM').toString()      // 15:03:24\nclock.localDateTime('SYSTEM').toString()  // 2016-08-27T15:03.24\nclock.zonedDateTime('SYSTEM').toString()  // 2016-08-27T15:03.24+01:00[SYSTEM]\n```\n\n### Fixing dates\nFor automatied testing it can be handy to fix time to a known instant. ```world-clock``` can be passed any 'nowable' object, i.e. one that exposes a ```now()``` function. e.g.\n```js\nconst clock = require('world-clock')({\n    nowable: {\n        now: () => new Date('2016-08-27T14:03.24Z').getTime()\n    }\n})\n\nclock.today('Europe/London').toString() // 2016-08-27\n```\nWe use [groundhog-day](https://github.com/guidesmiths/groundhog-day) for fixing time when testing.\n\n### Getting / Setting Joda\n```world-clock``` exposes its version of js-joda in joda.js\n```js\nconst joda = require('world-clock/joda')\n```\nYou can also supply the version of js-joda that ```world-clock``` will use by providing it as an option\n```js\nconst clock = require('world-clock')({\n    joda: require('js-joda')\n})\n```\n\n## FAQ\n\n### Why not use moment-timezone?\n[moment-timezone](https://github.com/moment/moment-timezone) is mutable which can result in hard to diagnose bugs. It lacks support for local dates/times and is restricted by trying to remain compatible with [moment](https://github.com/moment/moment).\n\n### Why not use js-joda?\n[js-joda](https://github.com/js-joda/js-joda) does not currently handle timezone names (e.g. 'Europe/London'). This issue is being tracked [here](https://github.com/js-joda/js-joda/issues/32).\n\n### Why doesn't world-clock work on Windows?\nworld-clock relies on [zoneinfo](https://github.com/gsmcwhirter/node-zoneinfo) which parses zoneinfo files from ```/usr/share/zoneinfo```. It therefore does not work on windows.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/guidesmiths/world-clock.git"
  },
  "scripts": {
    "codeclimate": "codeclimate-test-reporter < coverage/lcov.info",
    "istanbul": "istanbul cover --report html --report lcov _mocha",
    "lint": "eslint .",
    "precommit": "npm run lint && npm test",
    "test": "mocha test"
  },
  "version": "1.3.1"
}
